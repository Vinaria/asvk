Общая информация:

	- В качестве входных данных принимаются файлы с расширением .json следующего 
	формата. Каждый файл содержит список из двух 	элементов. Первый элемент - 
	список граней графа, второй - словарь соответствия вершин и количества 
	подключенных горожан. В графе должна быть хотя бы одна вершина. Пример содержимого файла:

		[[["A", "B"], ["B", "C"], ["C", "D"]], {"A": 10, "B": 20, "C": 10, "D" : 20}]

	- Ответ предоставляется в виде json-списка вида <имя файла>:<ответ>, где 
	<ответ> - или список из наиболее важных вершин графа, или сообщение об ошибке



Основное задание:

	- В одной директории с файлами программы должна наодиться папка /data. В нее 
	требуется поместить файлы с входными данными
	
	- Программу достаточно запустить командой 

		$ python3 main.py
	
	- Ответ предоставляется в стандартном потоке вывода
	


Инструкция к Play-with-Docker:

1. Создаем новую сущность (instance), в ней создаем файл docker-compose.yml. С помощью 
функции "EDITOR" копируем в него содержимое нужного docker-compose.yml файла 
(из папки с соответствующим названием).

2. В директории /root создаем новую папку /vol и помещаем туда файлы с входными данными 
(аналогично тому, как проделали это с docker-compose.yml). Файлы могут называться любым 
образом. Должно получиться
	
	- root
		- docker-compose.yml
		- vol
			- t1.json
			- t2.json

3. Загружаем образы с Docker hub с помощью команды

	$ docker compose pull

4. Запускаем контейнеры:

	$ docker compose up

5. Рядом с кнопкой "OPEN PORT" появляются номера доступных портов. При нажатии на 
нужный порт, откроется соответствующая вкладка браузера. При отправке GET-запроса 
на порт клиента вы получите ответ на задачу в указанном выше формате.

6. С помощью функции "EDIT" можно менять содержимое файлов с заданиями, не прерывая 
работы контейнеров. В ответ на повторный GET-запрос клиент отправит ответ на новый 
комплект входных данных.



